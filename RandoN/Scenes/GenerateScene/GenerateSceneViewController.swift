//
//  GenerateSceneViewController.swift
//  RandoN
//
//  Created by Mac on 03/06/2019.
//  Copyright (c) 2019 Lammax. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GenerateSceneDisplayLogic: class {
    func displaySomething(viewModel: GenerateScene.Something.ViewModel)
}

class GenerateSceneViewController: UIViewController {
    var interactor: GenerateSceneBusinessLogic?
    var router: (NSObjectProtocol & GenerateSceneRoutingLogic & GenerateSceneDataPassing)?
    
    var isUnique: Bool = true

    @IBOutlet weak var resultTextField: UITextField!
    @IBOutlet weak var fromTextField: UITextField!
    @IBOutlet weak var toTextField: UITextField!
    @IBOutlet weak var numbersCountTextField: UITextField!
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        GenerateSceneConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }

    @IBAction func calculateButtonClicked(_ sender: UIButton) {
        
        //TODO: make array with values - remove gotten values, and every time get random value from remain array
        
        let maybeFrom = fromTextField.text
        let maybeTo = toTextField.text
        let maybeNums = numbersCountTextField.text
        
        var result: String = "No results"
        var resArr: [Int] = []
        
        
        if let from = maybeFrom, let fromInt = Int(from), let to = maybeTo, let toInt = Int(to), let nums = maybeNums, let numsInt = Int(nums) {
            let minVal = min(fromInt, toInt)
            let maxVal = max(fromInt, toInt)
            var availableValues: [Int] = [Int](minVal...maxVal)

            
            while resArr.count < numsInt && availableValues.count > 0 {
                let randomIndex = Int(arc4random_uniform(UInt32(availableValues.count)))
                let nextVal = availableValues[randomIndex]
                if self.isUnique {
                    if !resArr.contains(nextVal) {
                        resArr.append(nextVal)
                        availableValues.remove(at: randomIndex)
                    }
                } else {
                    resArr.append(nextVal)
                }
            }
            
            result = resArr.map({ String($0) }).joined(separator: " ")
            
            DispatchQueue.main.async {
                self.resultTextField.text = result
            }
            
        }
        
    }
    @IBAction func uniqueNumbersSwitchChanged(_ sender: UISwitch) {
        self.isUnique = sender.isOn
    }
    // MARK: Do life

    func setupView() {
        self.hideKeyboardWhenTappedAround()
    }

}

extension GenerateSceneViewController: GenerateSceneDisplayLogic {
    
    func displaySomething(viewModel: GenerateScene.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }

}
